// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: counting.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Counting_Hello_FullMethodName     = "/services.Counting/Hello"
	Counting_CountBeef_FullMethodName = "/services.Counting/CountBeef"
)

// CountingClient is the client API for Counting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CountingClient interface {
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	CountBeef(ctx context.Context, in *CountBeefRequest, opts ...grpc.CallOption) (*CountBeefResponse, error)
}

type countingClient struct {
	cc grpc.ClientConnInterface
}

func NewCountingClient(cc grpc.ClientConnInterface) CountingClient {
	return &countingClient{cc}
}

func (c *countingClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, Counting_Hello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countingClient) CountBeef(ctx context.Context, in *CountBeefRequest, opts ...grpc.CallOption) (*CountBeefResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountBeefResponse)
	err := c.cc.Invoke(ctx, Counting_CountBeef_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CountingServer is the server API for Counting service.
// All implementations must embed UnimplementedCountingServer
// for forward compatibility
type CountingServer interface {
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	CountBeef(context.Context, *CountBeefRequest) (*CountBeefResponse, error)
	mustEmbedUnimplementedCountingServer()
}

// UnimplementedCountingServer must be embedded to have forward compatible implementations.
type UnimplementedCountingServer struct {
}

func (UnimplementedCountingServer) Hello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedCountingServer) CountBeef(context.Context, *CountBeefRequest) (*CountBeefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountBeef not implemented")
}
func (UnimplementedCountingServer) mustEmbedUnimplementedCountingServer() {}

// UnsafeCountingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CountingServer will
// result in compilation errors.
type UnsafeCountingServer interface {
	mustEmbedUnimplementedCountingServer()
}

func RegisterCountingServer(s grpc.ServiceRegistrar, srv CountingServer) {
	s.RegisterService(&Counting_ServiceDesc, srv)
}

func _Counting_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountingServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Counting_Hello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountingServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Counting_CountBeef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountBeefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountingServer).CountBeef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Counting_CountBeef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountingServer).CountBeef(ctx, req.(*CountBeefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Counting_ServiceDesc is the grpc.ServiceDesc for Counting service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Counting_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.Counting",
	HandlerType: (*CountingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _Counting_Hello_Handler,
		},
		{
			MethodName: "CountBeef",
			Handler:    _Counting_CountBeef_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "counting.proto",
}
